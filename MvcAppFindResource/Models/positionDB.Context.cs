//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcAppFindResource.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class positionDBEntities : DbContext
    {
        public positionDBEntities()
            : base("name=positionDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<position> positions { get; set; }
    
        public virtual ObjectResult<positions_selectct_by_id_Result> positions_selectct_by_id(string keyName)
        {
            var keyNameParameter = keyName != null ?
                new ObjectParameter("keyName", keyName) :
                new ObjectParameter("keyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<positions_selectct_by_id_Result>("positions_selectct_by_id", keyNameParameter);
        }
    
        public virtual int positions_add(Nullable<int> id, string keyName, Nullable<decimal> lat, Nullable<decimal> lng, Nullable<System.DateTime> dateStamp)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var keyNameParameter = keyName != null ?
                new ObjectParameter("keyName", keyName) :
                new ObjectParameter("keyName", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(decimal));
    
            var lngParameter = lng.HasValue ?
                new ObjectParameter("Lng", lng) :
                new ObjectParameter("Lng", typeof(decimal));
    
            var dateStampParameter = dateStamp.HasValue ?
                new ObjectParameter("dateStamp", dateStamp) :
                new ObjectParameter("dateStamp", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("positions_add", idParameter, keyNameParameter, latParameter, lngParameter, dateStampParameter);
        }
    }
}
